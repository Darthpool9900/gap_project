type Agent = record {
  id: text;
  name: text;
  description: text;
  code: text;
  price: nat64;
  author: text;
  category: text;
  version: text;
  created_at: nat64;
  updated_at: nat64;
  downloads: nat64;
  rating: float64;
};

type AgentListing = record {
  agent: Agent;
  is_active: bool;
  total_sales: nat64;
  total_revenue: nat64;
};

type Purchase = record {
  id: text;
  agent_id: text;
  buyer: text;
  seller: text;
  price: nat64;
  timestamp: nat64;
  transaction_hash: text;
};

type MarketplaceResponse = record {
  status: text;
  message: text;
  data: opt text;
};

type CreateAgentRequest = record {
  name: text;
  description: text;
  code: text;
  price: nat64;
  category: text;
  version: text;
};

type BuyAgentRequest = record {
  agent_id: text;
  buyer: text;
};

type User = record {
  id: text;
  username: text;
  email: text;
  created_at: nat64;
};

type RegisterUserRequest = record {
  username: text;
  email: text;
};

service : {
  register_user: (RegisterUserRequest) -> (MarketplaceResponse);
  create_agent: (CreateAgentRequest) -> (MarketplaceResponse);
  buy_agent: (BuyAgentRequest) -> (MarketplaceResponse);
  update_agent: (text, CreateAgentRequest) -> (MarketplaceResponse);
  toggle_agent_listing: (text) -> (MarketplaceResponse);
  get_agent: (text) -> (opt Agent) query;
  get_all_agents: () -> (vec Agent) query;
  get_agents_by_category: (text) -> (vec Agent) query;
  get_user_agents: (text) -> (vec Agent) query;
  get_agent_listing: (text) -> (opt AgentListing) query;
  get_active_listings: () -> (vec AgentListing) query;
  get_user_purchases: (text) -> (vec Purchase) query;
  marketplace_stats: () -> (MarketplaceResponse) query;
}
